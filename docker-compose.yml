version: '3'
services:
  auth_database:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=authdb
    ports:
      - "5433:5432"
    volumes:
    - ./auth_service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  auth_service:
    build: 
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      auth_database:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:1@auth_database:5432/authdb

  course_database:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=coursedb
    ports:
      - "5434:5432"
    volumes:
    - ./course_service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  course_service:
    build: 
      context: ./course_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      course_database:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:1@course_database:5432/coursedb

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # reduce resource usage
      KAFKA_CFG_LOG_RETENTION_HOURS: 1
      KAFKA_CFG_LOG_SEGMENT_BYTES: 10485760
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    # volumes:
    #   - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  purchase_database:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=purchasedb
    ports:
      - "5435:5432"
    volumes:
    - ./purchase_service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  purchase_service:
    build: 
      context: ./purchase_service
      dockerfile: ../commons/Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      purchase_database:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SERVICE_PORT=8003
      - DATABASE_URL=postgresql://postgres:1@purchase_database:5432/purchasedb
      - KAFKA_BOOTSTRAP=kafka:9092

  # entitlement_database:
  #   image: postgres:17-alpine
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=1
  #     - POSTGRES_DB=coursedb
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #   - ./entitlement_service/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10

  # entitlement_service:
  #   build: 
  #     context: ./entitlement_service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8002:8002"
  #   depends_on:
  #     entitlement_database:
  #       condition: service_healthy
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:1@entitlement_database:5432/entitledb
    